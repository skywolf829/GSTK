{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sky\\\\Documents\\\\GitHub\\\\engineer-gpt-test\\\\photoshop-like-ui-react\\\\src\\\\components\\\\CanvasComponent.js\",\n  _s = $RefreshSig$();\n// MyComponent.js\nimport React, { useRef, useEffect } from 'react';\nimport { useWebSocket } from './WebSocketContext';\nimport 'react-resizable/css/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasComponent = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [imageSrc, setImageSrc] = useState('');\n\n  // Websocket setup (from global context)\n  const {\n    subscribe,\n    send\n  } = useWebSocket();\n  const sendTestData = () => {\n    const message = {\n      type: 'customType',\n      // Define the message type or structure as needed\n      data: \"test\"\n    };\n    send(message); // Use the send function from the context\n  };\n  useEffect(() => {\n    // Setup canvas\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    // Clear canvas for simplicity\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.fillStyle = \"#fff0f0\"; // Replace with any color you like\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  }, []);\n  useEffect(() => {\n    // Define the message filter and callback for subscription\n    const messageFilter = message => message.type === 'image';\n    const messageCallback = message => {\n      /* Do something with message/message.data */\n      console.log(message);\n      const imageBase64 = message.image;\n      //const otherData = data.otherData;  // Use other data as needed\n      //const imageSrc = `data:image/jpeg;base64,${imageBase64}`;\n      //setImageSrc(imageSrc);  // Assuming you have a state setter to update the image source\n    };\n\n    // Subscribe to messages that pass the filter\n    const unsubscribe = subscribe(messageFilter, messageCallback);\n\n    // Unsubscribe from messages when the component unmounts\n    return () => unsubscribe();\n  }, [subscribe]);\n  useEffect(() => {\n    if (imageSrc && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Create a new image and set its source to the Base64 string\n      const image = new Image();\n      image.src = `data:image/jpeg;base64,${imageSrc}`;\n\n      // Once the image has loaded, draw it on the canvas\n      image.onload = () => {\n        // Resize canvas to match image dimensions\n        canvas.width = image.width;\n        canvas.height = image.height;\n\n        // Draw the image onto the canvas\n        ctx.drawImage(image, 0, 0);\n      };\n    }\n  }, [imageSrc]); // Re-run the effect when imageSrc changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-container\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(CanvasComponent, \"GImu3JKq+mt1e36VRjUDCZKEWhk=\", false, function () {\n  return [useWebSocket];\n});\n_c = CanvasComponent;\nexport default CanvasComponent;\nvar _c;\n$RefreshReg$(_c, \"CanvasComponent\");","map":{"version":3,"names":["React","useRef","useEffect","useWebSocket","jsxDEV","_jsxDEV","CanvasComponent","_s","canvasRef","imageSrc","setImageSrc","useState","subscribe","send","sendTestData","message","type","data","canvas","current","context","getContext","clearRect","width","height","fillStyle","fillRect","messageFilter","messageCallback","console","log","imageBase64","image","unsubscribe","ctx","Image","src","onload","drawImage","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sky/Documents/GitHub/engineer-gpt-test/photoshop-like-ui-react/src/components/CanvasComponent.js"],"sourcesContent":["\r\n\r\n// MyComponent.js\r\nimport React, {useRef, useEffect} from 'react';\r\nimport { useWebSocket } from './WebSocketContext';\r\nimport 'react-resizable/css/styles.css';\r\n\r\nconst CanvasComponent = () => {\r\n    const canvasRef = useRef(null);\r\n    const [imageSrc, setImageSrc] = useState('');\r\n\r\n    // Websocket setup (from global context)\r\n    const { subscribe, send } = useWebSocket();\r\n    \r\n\r\n    const sendTestData = () => {\r\n        const message = {\r\n          type: 'customType', // Define the message type or structure as needed\r\n          data: \"test\",\r\n        };\r\n        send(message); // Use the send function from the context\r\n      };\r\n      useEffect(() => {\r\n        // Setup canvas\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        // Clear canvas for simplicity\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        context.fillStyle = \"#fff0f0\"; // Replace with any color you like\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n      }, []);\r\n\r\n    useEffect(() => {        \r\n        // Define the message filter and callback for subscription\r\n        const messageFilter = (message) => message.type === 'image';\r\n        const messageCallback = (message) => {\r\n            /* Do something with message/message.data */\r\n            console.log(message);\r\n            const imageBase64 = message.image;\r\n            //const otherData = data.otherData;  // Use other data as needed\r\n            //const imageSrc = `data:image/jpeg;base64,${imageBase64}`;\r\n            //setImageSrc(imageSrc);  // Assuming you have a state setter to update the image source\r\n        };\r\n\r\n        // Subscribe to messages that pass the filter\r\n        const unsubscribe = subscribe(messageFilter, messageCallback);\r\n\r\n        // Unsubscribe from messages when the component unmounts\r\n        return () => unsubscribe();\r\n    }, [subscribe]);\r\n\r\n    useEffect(() => {\r\n        if (imageSrc && canvasRef.current) {\r\n          const canvas = canvasRef.current;\r\n          const ctx = canvas.getContext('2d');\r\n          \r\n          // Create a new image and set its source to the Base64 string\r\n          const image = new Image();\r\n          image.src = `data:image/jpeg;base64,${imageSrc}`;\r\n      \r\n          // Once the image has loaded, draw it on the canvas\r\n          image.onload = () => {\r\n            // Resize canvas to match image dimensions\r\n            canvas.width = image.width;\r\n            canvas.height = image.height;\r\n      \r\n            // Draw the image onto the canvas\r\n            ctx.drawImage(image, 0, 0);\r\n          };\r\n        }\r\n      }, [imageSrc]); // Re-run the effect when imageSrc changes\r\n\r\n    return (\r\n        <div className=\"canvas-container\">\r\n          <canvas ref={canvasRef}  />\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default CanvasComponent;\r\n\r\n\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
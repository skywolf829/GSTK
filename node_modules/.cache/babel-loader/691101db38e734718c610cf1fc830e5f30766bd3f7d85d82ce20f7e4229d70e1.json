{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sky\\\\Documents\\\\GitHub\\\\engineer-gpt-test\\\\photoshop-like-ui-react\\\\src\\\\components\\\\WebSocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// WebSocketContext.js\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketContext = /*#__PURE__*/createContext(null);\nexport const useWebSocket = () => {\n  _s();\n  return useContext(WebSocketContext);\n};\n_s(useWebSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const WebSocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [ws, setWs] = useState(null);\n  const subscribersRef = useRef([]);\n  let expectingBinary = false;\n  let binarySize = 0;\n  let messageType = '';\n  const connect = (serverIp, serverPort) => {\n    if (ws != null) {\n      ws.close(); // Ensure any existing connection is closed\n    }\n    const socket = new WebSocket(`ws://${serverIp}:${serverPort}`);\n    socket.binaryType = 'blob'; // Ensure binary messages are received as Blob objects\n\n    socket.addEventListener('open', function (event) {\n      console.log('Connected to WS Server');\n    });\n\n    // Your existing socket.onmessage and other event listeners here...\n\n    socket.onclose = () => {\n      console.log('WebSocket Disconnected');\n      setWs(null); // Reset the WebSocket instance in state\n    };\n    socket.onmessage = async event => {\n      if (expectingBinary && event.data instanceof Blob) {\n        const blob = event.data;\n        if (blob.size === binarySize) {\n          // Notify subscribers interested in binary data of this type\n          subscribersRef.current.forEach(({\n            filter,\n            callback\n          }) => {\n            if (filter({\n              type: messageType\n            })) {\n              callback(blob);\n            }\n          });\n        }\n        expectingBinary = false; // Reset for the next messages\n      } else if (typeof event.data === 'string') {\n        const message = JSON.parse(event.data);\n        if (message.type && 'binarySize' in message) {\n          // Prepare to receive binary data in the next message\n          expectingBinary = true;\n          binarySize = message.binarySize;\n          messageType = message.type;\n        } else {\n          // Notify subscribers for non-binary messages\n          subscribersRef.current.forEach(({\n            filter,\n            callback\n          }) => {\n            if (filter(message)) {\n              callback(message);\n            }\n          });\n        }\n      }\n    };\n    setWs(socket);\n  };\n  const subscribe = (filter, callback) => {\n    const subscriber = {\n      filter,\n      callback\n    };\n    subscribersRef.current.push(subscriber);\n    // Return an unsubscribe function\n    return () => {\n      subscribersRef.current = subscribersRef.current.filter(sub => sub !== subscriber);\n    };\n  };\n\n  // Function to send messages to the server\n  const send = message => {\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: {\n      ws,\n      subscribe,\n      send,\n      connect\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s2(WebSocketProvider, \"7Ju4/7Wx8f7Sa03gsYuNcnEDjjg=\");\n_c = WebSocketProvider;\nvar _c;\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","jsxDEV","_jsxDEV","WebSocketContext","useWebSocket","_s","WebSocketProvider","children","_s2","ws","setWs","subscribersRef","expectingBinary","binarySize","messageType","connect","serverIp","serverPort","close","socket","WebSocket","binaryType","addEventListener","event","console","log","onclose","onmessage","data","Blob","blob","size","current","forEach","filter","callback","type","message","JSON","parse","subscribe","subscriber","push","sub","send","readyState","OPEN","stringify","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sky/Documents/GitHub/engineer-gpt-test/photoshop-like-ui-react/src/components/WebSocketContext.js"],"sourcesContent":["// WebSocketContext.js\r\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\r\n\r\nconst WebSocketContext = createContext(null);\r\n\r\nexport const useWebSocket = () => useContext(WebSocketContext);\r\n\r\nexport const WebSocketProvider = ({ children }) => {\r\n  const [ws, setWs] = useState(null);\r\n  const subscribersRef = useRef([]);\r\n\r\n  let expectingBinary = false;\r\n  let binarySize = 0;\r\n  let messageType = '';\r\n\r\n  const connect = (serverIp, serverPort) => {\r\n    if (ws != null) {\r\n      ws.close(); // Ensure any existing connection is closed\r\n    }\r\n\r\n    const socket = new WebSocket(`ws://${serverIp}:${serverPort}`);\r\n    socket.binaryType = 'blob'; // Ensure binary messages are received as Blob objects\r\n\r\n    socket.addEventListener('open', function (event) {\r\n      console.log('Connected to WS Server');\r\n    });\r\n\r\n    // Your existing socket.onmessage and other event listeners here...\r\n\r\n    socket.onclose = () => {\r\n      console.log('WebSocket Disconnected');\r\n      setWs(null); // Reset the WebSocket instance in state\r\n    };\r\n\r\n    socket.onmessage = async (event) => {\r\n      if (expectingBinary && event.data instanceof Blob) {\r\n        const blob = event.data;\r\n        if (blob.size === binarySize) {\r\n          // Notify subscribers interested in binary data of this type\r\n          subscribersRef.current.forEach(({ filter, callback }) => {\r\n            if (filter({ type: messageType })) {\r\n              callback(blob);\r\n            }\r\n          });\r\n        }\r\n        expectingBinary = false;  // Reset for the next messages\r\n      } else if (typeof event.data === 'string') {\r\n        const message = JSON.parse(event.data);\r\n        if (message.type && 'binarySize' in message) {\r\n          // Prepare to receive binary data in the next message\r\n          expectingBinary = true;\r\n          binarySize = message.binarySize;\r\n          messageType = message.type;\r\n        } else {\r\n          // Notify subscribers for non-binary messages\r\n          subscribersRef.current.forEach(({ filter, callback }) => {\r\n            if (filter(message)) {\r\n              callback(message);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    setWs(socket);\r\n  };\r\n\r\n  const subscribe = (filter, callback) => {\r\n    const subscriber = { filter, callback };\r\n    subscribersRef.current.push(subscriber);\r\n    // Return an unsubscribe function\r\n    return () => {\r\n      subscribersRef.current = subscribersRef.current.filter(sub => sub !== subscriber);\r\n    };\r\n  };\r\n\r\n  // Function to send messages to the server\r\n  const send = (message) => {\r\n    if (ws && ws.readyState === WebSocket.OPEN) {\r\n      ws.send(JSON.stringify(message));\r\n    } else {\r\n      console.error('WebSocket is not connected.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <WebSocketContext.Provider value={{ ws, subscribe, send, connect}}>\r\n      {children}\r\n    </WebSocketContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
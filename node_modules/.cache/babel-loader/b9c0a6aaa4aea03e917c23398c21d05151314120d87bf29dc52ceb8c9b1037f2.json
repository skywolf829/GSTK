{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sky\\\\Documents\\\\GitHub\\\\engineer-gpt-test\\\\photoshop-like-ui-react\\\\src\\\\components\\\\CanvasComponent.js\",\n  _s = $RefreshSig$();\n// MyComponent.js\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useWebSocket } from './WebSocketContext';\nimport 'react-resizable/css/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasComponent = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [imageSrc, setImageSrc] = useState('');\n\n  // Websocket setup (from global context)\n  const {\n    subscribe,\n    send\n  } = useWebSocket();\n  const sendTestData = () => {\n    const message = {\n      type: 'customType',\n      // Define the message type or structure as needed\n      data: \"test\"\n    };\n    send(message); // Use the send function from the context\n  };\n  useEffect(() => {\n    // Setup canvas\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    // Clear canvas for simplicity\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.fillStyle = \"#fff0f0\"; // Replace with any color you like\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  }, []);\n  useEffect(() => {\n    const unsubscribe = subscribe(message => message.type === 'image',\n    // This will match the JSON header for image messages\n    async data => {\n      console.log(data);\n      if (data instanceof Blob) {\n        // Handle the binary image data\n        const imageBitmap = await createImageBitmap(data);\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        if (canvas && ctx && imageBitmap) {\n          canvas.width = imageBitmap.width;\n          canvas.height = imageBitmap.height;\n          ctx.drawImage(imageBitmap, 0, 0);\n        }\n      }\n    });\n    return () => unsubscribe(); // Unsubscribe when the component unmounts\n  }, [subscribe]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-container\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_s(CanvasComponent, \"T8qReVpR5Qctlla4SG5oQimED3U=\", false, function () {\n  return [useWebSocket];\n});\n_c = CanvasComponent;\nexport default CanvasComponent;\nvar _c;\n$RefreshReg$(_c, \"CanvasComponent\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useWebSocket","jsxDEV","_jsxDEV","CanvasComponent","_s","canvasRef","imageSrc","setImageSrc","subscribe","send","sendTestData","message","type","data","canvas","current","context","getContext","clearRect","width","height","fillStyle","fillRect","unsubscribe","console","log","Blob","imageBitmap","createImageBitmap","ctx","drawImage","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sky/Documents/GitHub/engineer-gpt-test/photoshop-like-ui-react/src/components/CanvasComponent.js"],"sourcesContent":["\r\n\r\n// MyComponent.js\r\nimport React, {useRef, useEffect, useState} from 'react';\r\nimport { useWebSocket } from './WebSocketContext';\r\nimport 'react-resizable/css/styles.css';\r\n\r\nconst CanvasComponent = () => {\r\n    const canvasRef = useRef(null);\r\n    const [imageSrc, setImageSrc] = useState('');\r\n\r\n    // Websocket setup (from global context)\r\n    const { subscribe, send } = useWebSocket();\r\n    \r\n\r\n    const sendTestData = () => {\r\n        const message = {\r\n          type: 'customType', // Define the message type or structure as needed\r\n          data: \"test\",\r\n        };\r\n        send(message); // Use the send function from the context\r\n      };\r\n      useEffect(() => {\r\n        // Setup canvas\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        // Clear canvas for simplicity\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        context.fillStyle = \"#fff0f0\"; // Replace with any color you like\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n      }, []);\r\n\r\n      useEffect(() => {\r\n        const unsubscribe = subscribe(\r\n          (message) => message.type === 'image', // This will match the JSON header for image messages\r\n          async (data) => {\r\n            console.log(data)\r\n            if (data instanceof Blob) {\r\n              // Handle the binary image data\r\n              const imageBitmap = await createImageBitmap(data);\r\n              const canvas = canvasRef.current;\r\n              const ctx = canvas.getContext('2d');\r\n              if (canvas && ctx && imageBitmap) {\r\n                canvas.width = imageBitmap.width;\r\n                canvas.height = imageBitmap.height;\r\n                ctx.drawImage(imageBitmap, 0, 0);\r\n              }\r\n            }\r\n          }\r\n        );\r\n    \r\n        return () => unsubscribe(); // Unsubscribe when the component unmounts\r\n      }, [subscribe]);\r\n\r\n    return (\r\n        <div className=\"canvas-container\">\r\n          <canvas ref={canvasRef}  />\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default CanvasComponent;\r\n\r\n\r\n  "],"mappings":";;AAEA;AACA,OAAOA,KAAK,IAAGC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACxD,SAASC,YAAY,QAAQ,oBAAoB;AACjD,OAAO,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAM;IAAES,SAAS;IAAEC;EAAK,CAAC,GAAGT,YAAY,CAAC,CAAC;EAG1C,MAAMU,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMC,OAAO,GAAG;MACdC,IAAI,EAAE,YAAY;MAAE;MACpBC,IAAI,EAAE;IACR,CAAC;IACDJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;EACjB,CAAC;EACDb,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,MAAM,GAAGT,SAAS,CAACU,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACvC;IACAD,OAAO,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;IACpDJ,OAAO,CAACK,SAAS,GAAG,SAAS,CAAC,CAAC;IAC/BL,OAAO,CAACM,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAER,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;EACrD,CAAC,EAAE,EAAE,CAAC;EAENtB,SAAS,CAAC,MAAM;IACd,MAAMyB,WAAW,GAAGf,SAAS,CAC1BG,OAAO,IAAKA,OAAO,CAACC,IAAI,KAAK,OAAO;IAAE;IACvC,MAAOC,IAAI,IAAK;MACdW,OAAO,CAACC,GAAG,CAACZ,IAAI,CAAC;MACjB,IAAIA,IAAI,YAAYa,IAAI,EAAE;QACxB;QACA,MAAMC,WAAW,GAAG,MAAMC,iBAAiB,CAACf,IAAI,CAAC;QACjD,MAAMC,MAAM,GAAGT,SAAS,CAACU,OAAO;QAChC,MAAMc,GAAG,GAAGf,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;QACnC,IAAIH,MAAM,IAAIe,GAAG,IAAIF,WAAW,EAAE;UAChCb,MAAM,CAACK,KAAK,GAAGQ,WAAW,CAACR,KAAK;UAChCL,MAAM,CAACM,MAAM,GAAGO,WAAW,CAACP,MAAM;UAClCS,GAAG,CAACC,SAAS,CAACH,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;QAClC;MACF;IACF,CACF,CAAC;IAED,OAAO,MAAMJ,WAAW,CAAC,CAAC,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACf,SAAS,CAAC,CAAC;EAEjB,oBACIN,OAAA;IAAK6B,SAAS,EAAC,kBAAkB;IAAAC,QAAA,eAC/B9B,OAAA;MAAQ+B,GAAG,EAAE5B;IAAU;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAGd,CAAC;AAACjC,EAAA,CArDID,eAAe;EAAA,QAKWH,YAAY;AAAA;AAAAsC,EAAA,GALtCnC,eAAe;AAuDrB,eAAeA,eAAe;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}